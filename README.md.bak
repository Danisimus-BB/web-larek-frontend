# Проектная работа "Веб-ларек"

Интернет-магазин с каталогом товаров, корзиной и оформлением заказа.

Стек: HTML, SCSS, TS, Webpack

## Структура проекта:
- src/ — исходные файлы проекта
- src/components/ — папка с компонентами приложения
- src/components/base/ — базовые классы и интерфейсы
- src/common.blocks/ — блоки стилей по БЭМ методологии
- src/store/ — хранилище данных 
- src/services/ — сервисы для работы с API
- src/utils/ — утилиты и вспомогательные функции
- src/types/ — типы и интерфейсы

## Важные файлы:
- src/pages/index.html — HTML-файл главной страницы
- src/types/index.ts — основные типы приложения
- src/index.ts — точка входа приложения и связь компонентов
- src/scss/styles.scss — корневой файл стилей
- src/utils/constants.ts — константы проекта
- src/utils/utils.ts — вспомогательные функции

## Установка и запуск
Для установки и запуска проекта необходимо выполнить команды

```
npm install
npm run start
```

или

```
yarn
yarn start
```
## Сборка

```
npm run build
```

или

```
yarn build
```
## Данные и типы данных, используемые в приложении

- Товар 

```
interface ICard {
  id: string; 
  description: string; 
  image: string; 
  title: string; 
  category: string; 
  price: number | null; 
  selected: boolean;
}
```

- Заказ

```
interface IOrder {
	total: number; 
	items: string[]; 
	email: string; 
	phone: string; 
	address: string; 
	payment: PaymentType; 
}
```

## Архитектура приложения

Проект построен по архитектуре MVP (Model-View-Presenter):
- **Model** - слой данных, отвечает за хранение и обработку данных
- **View** - слой представления, отвечает за отображение данных на странице
- **Presenter** - связующий слой, отвечает за связь между моделью и представлением

### Базовые классы

#### Класс `Component` (src/components/base/Component.ts)
Абстрактный базовый класс для всех компонентов представления. Предоставляет общие методы для работы с DOM:
- Управление состоянием компонента
- Манипуляции с классами элементов
- Установка текстового содержимого
- Управление блокировкой и видимостью элементов
- Очистка содержимого
- Отрисовка компонента

#### Класс `Model` (src/components/base/Model.ts)
Абстрактный базовый класс для всех моделей данных. Обеспечивает:
- Хранение данных определенного типа
- Обновление данных
- Валидацию данных
- Генерацию событий при изменении данных

#### Класс `EventEmitter` (src/components/base/events.ts)
Реализует паттерн "Издатель-подписчик" для обеспечения слабосвязанной коммуникации между компонентами:
- Подписка на события (`on`)
- Отписка от событий (`off`)
- Инициирование событий (`emit`)
- Создание триггеров событий (`trigger`)

#### Класс `Api` (src/components/base/api.ts)
Базовый класс для взаимодействия с REST API:
- Методы для выполнения HTTP-запросов (GET, POST)
- Обработка ответов и ошибок

### Слой Model (Модели данных)

#### Хранилище (src/store/index.ts)
Централизованное хранилище состояния приложения:
- Хранение продуктов, корзины и данных заказа
- Методы для манипуляции данными
- Система подписок на изменения

#### Сервисы (src/services/ProductService.ts)
Классы для работы с внешними API:
- Получение продуктов с сервера
- Отправка заказа

#### Модели данных
- **ProductsData** - управление каталогом товаров
- **BasketData** - управление корзиной покупок
- **OrderData** - управление данными заказа

### Слой View (Компоненты представления)

#### Основные компоненты
- **Card** (src/components/Card.ts) - карточка товара и базовый класс для всех карточек
- **BasketCard** (src/components/Card.ts) - карточка товара в корзине
- **Modal** (src/components/Modal.ts) - модальное окно
- **Basket** (src/components/Basket.ts) - компонент корзины
- **Page** (src/components/Page.ts) - основной компонент страницы
- **OrderContacts**, **OrderPayment** - компоненты оформления заказа

#### Особенности компонентов
- Все компоненты наследуются от базового класса `Component`
- Компоненты отвечают только за отображение и взаимодействие с пользователем
- Компоненты генерируют события при действиях пользователя
- Данные для отображения получают через методы `render`

### Слой Presenter (Связующий слой)

Роль презентера в проекте выполняет файл `src/index.ts`, который:
- Создает экземпляры всех моделей и компонентов
- Связывает модели и представления через систему событий
- Обрабатывает события пользовательского интерфейса
- Инициирует обновление данных и перерисовку представлений

#### Ключевые события
- `card:change` - изменение списка товаров
- `card:selected` - выбор карточки товара
- `preview:change` - изменение товара для предпросмотра
- `basket:change` - изменение содержимого корзины
- `order:submit`, `contacts:submit` - отправка заказа
- `modal:open`, `modal:close` - управление модальными окнами

## Особенности реализации

- Полностью кликабельные карточки товаров (вместо кнопки "В корзину")
- Модальное окно с детальной информацией о товаре
- Корзина с возможностью удаления товаров
- Двухшаговая форма оформления заказа с валидацией
- Адаптивный дизайн
